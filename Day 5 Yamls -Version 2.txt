Example 1.

apiVersion: v1
kind: Pod
metadata:
  name: command-demo
  labels:
    purpose: demonstrate-command
spec:
  containers:
  - name: command-demo-container
    image: ubuntu
    command: ["printenv"]
    args: ["HOSTNAME", "KUBERNETES_PORT"]
  restartPolicy: OnFailure


Example 2:

apiVersion: v1
kind: ReplicationController
metadata:
  name: nginx
spec:
  replicas: 3
  selector:
    app: nginx
  template:
    metadata:
      name: nginx
      labels:
        app: nginx
    spec:
      containers:
      - name: nginx
        image: nginx
        ports:
        - containerPort: 80

Example :3

apiVersion: v1
kind: Pod
metadata:
  name: two-containers
spec:
  restartPolicy: Never
  volumes:
  - name: shared-data
    emptyDir: {}

  containers:

  - name: nginx-container
    image: nginx
    volumeMounts:
    - name: shared-data
      mountPath: /usr/share/nginx/html

  - name: debian-container
    image: debian
    volumeMounts:
    - name: shared-data
      mountPath: /pod-data
    command: ["/bin/sh"]
    args: ["-c", "echo Hello from the debian container > /pod-data/index.html"]

Example 4:

Step 1
echo -n 'root' > username.txt
echo -n 'admin' > pwd.txt

Step 2
kubectl create secret generic db-user-pass --from-file=username.txt --from-file=pwd.txt

Step 3
kubectl get secrets

kubectl describe secrets db-user-pass

kubectl get secret db-user-pass --output=yaml 
(copy the username encryption from yaml)

Step 4
Go to git bash shell.
echo -n  'copy enrcryption from step 3' | base64 --decode

apiVersion: v1
kind: Pod
metadata:
  name: mypod
spec:
  containers:
  - name: mypod
    image: redis
    volumeMounts:
    - name: config
      mountPath: "/etc/vols"
      readOnly: true
  volumes:
  - name: config
    secret:
      secretName: db-user-pass
# (use the secret name in Step 3 of the previous exercise)

kubectl create -f sec-vol.yml
kubectl get pod mypod
kubectl exec -it mypod bash
# ls /etc/vols

Example 5:
-------------
kubectl create secret generic txtkeys --from-literal=username="root" --from-literal=password="admin"

YAML FILE
-------------
apiVersion: v1
kind: Pod
metadata:
  name: secret-envars-test-pod
spec:
  containers:
  - name: envars-test-container
    image: nginx
    env:
    - name: SECRET_USERNAME
      valueFrom:
        secretKeyRef:
          name: txtkeys
          key: username
    - name: SECRET_PASSWORD
      valueFrom:
        secretKeyRef:
          name: txtkeys
          key: password


